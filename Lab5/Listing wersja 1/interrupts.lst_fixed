###############################################################################
#                                                                             #
#     IAR Assembler V5.10.4.50168/W32  for MSP430 11/Jan/2011  14:44:12       #
#     Copyright 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#           Target option =  MSP430                                           #
#           Source file   =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\interrupts.asm#
#           List file     =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\List\interrupts.lst#
#           Object file   =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\Obj\interrupts.r43#
#           Command line  =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\interrupts.asm #
#                            -OE:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\Obj\ #
#                            -s+ -M<> -w+                                     #
#                            -LE:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\List\ #
#                            -t8 -r -D__MSP430F149__                          #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0 Kickstart\430\INC\ #
#                                                                             #
###############################################################################

      1    000000              NAME INTERRUPTS
      2    000000              #include "msp430.h"           ; Processor specific definitions
      3    000000              
      4    000000              PUBLIC interrupts             ; Declare symbol to be exported
      5    000000              
      6    000000              EXTERN g_r_char               ; bufor receive do przekazywania pojedynczego znaku
      7    000000              EXTERN g_t_curr_char          ; wskaznik nastepnego znaku do wyslania przez trans
      8    000000              EXTERN g_t_chars_to_send      ; int ilosc znakow pozostala do wyslania przez trans
      9    000000              EXTERN g_flags                ; int flagi
     10    000000              EXTERN receive_timeout        ; czas o jaki trzeba przesunac timer A
     11    000000              RSEG CODE                     ; Code is relocatable
     12    000000              
     13    000000              /* znaczniki przekazywane miedzy ISR a petla
                                glowna
     14    000000              b0 = przerwanie receive zglosilo nowy znak w
                                g_r_char
     15    000000              b1 = przerwanie zauwazylo, ze aplikacja nie
                                wyczyscila b0 - nie nadazyla
     16    000000                  z odebraniem danej z bufora g_r_char
     17    000000              b4 = przerwanie transmit zglosilo gotowosc do
                                wyslania nowego tekstu
     18    000000              b5 = przerwanie timerA zglosilo timeout
                                
     19    000000              */  
     20    000000              
     21    000000              interrupts
     22    000000              
     23    000000              default_int:
     24    000000 F0C08000....         BIC.B #080h, P1OUT            ; zapala diode bledu
     25    000006 0013                 RETI
     26    000008                      
     27    000008              transmit_usart:
     28    000008 0612                 PUSH R6
     29    00000A 8093....             CMP #0000h,g_t_chars_to_send  ; czy wszystko wyslano
     30    00000E 0A24                 JEQ end_transmision
     31    000010 1640....             MOV g_t_curr_char,R6
     32    000014 E046....             MOV.B @R6, U0TXBUF
     33    000018 9083....             DEC g_t_chars_to_send
     34    00001C 9053....             ADD #0001h,g_t_curr_char      ; skok do nastepneg o znaku
     35    000020 3641                 POP R6
     36    000022 0013                 RETI
     37    000024              end_transmision:
     38    000024 B0D01000....         BIS #0010h, g_flags           ; powiadom ze chcemy kolejny tekst do wyslania
     39    00002A 16410200             MOV 2(SP), R6
     40    00002E 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     41    000032 81460200             MOV R6, 2(SP)                 ; aby obudzic procesor
     42    000036 3641                 POP R6
     43    000038 0013                 RETI
     44    00003A                      
     45    00003A                      
     46    00003A              receive_usart:
     47    00003A D0427600....         MOV.B &U0RXBUF,g_r_char       
     48    000040 90B3....             BIT #0001h, g_flags           ; czy aplikacja zdarzyla odebrac?
     49    000044 0224                 JZ receive_next
     50    000046 A0D3....             BIS #0002h,g_flags            ; powiadom o bledzie
     51    00004A              receive_next:
     52    00004A 90D3....             BIS #0001h,g_flags            ; powiadom ze odebralismy
     53    00004E 0612                 PUSH R6
     54    000050 16410200             MOV 2(SP), R6
     55    000054 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     56    000058 81460200             MOV R6, 2(SP)                 ; aby obudzic procesor
     57    00005C 3641                 POP R6
     58    00005E 0013                 RETI
     59    000060                      
     60    000060              timer_A_int:
     61    000060 B0D02000....         BIS #0020h, g_flags
     62    000066                      ; ADD TACCR0, receive_timeout
     63    000066 0612                 PUSH R6
     64    000068 16410200             MOV 2(SP), R6
     65    00006C 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     66    000070 81460200             MOV R6, 2(SP)                 ; aby obudzic procesor
     67    000074 3641                 POP R6
     68    000076 0013                 RETI
     69    000078              
     70    000000              COMMON INTVEC(1)              ; Interrupt vectors
     71    000000                      
     72    000002                      ORG PORT2_VECTOR      ; /* 0xFFE2 Port 2 */
     73    000002 ....                 DC16 default_int
     74    000004                      
     75    000004                      ORG USART1TX_VECTOR   ; /* 0xFFE4 USART 1 Transmit */
     76    000004 ....                 DC16 default_int
     77    000006                      
     78    000006                      ORG USART1RX_VECTOR   ; /* 0xFFE6 USART 1 Receive */
     79    000006 ....                 DC16 default_int
     80    000008                      
     81    000008                      ORG PORT1_VECTOR      ; /* 0xFFE8 Port 1 */
     82    000008 ....                 DC16 default_int
     83    00000A                      
     84    00000A                      ORG TIMERA1_VECTOR    ; /* 0xFFEA Timer A CC1-2, TA */
     85    00000A ....                 DC16 default_int
     86    00000C                      
     87    00000C                      ORG TIMERA0_VECTOR    ; /* 0xFFEC Timer A CC0 */
     88    00000C ....                 DC16 timer_A_int
     89    00000E                      
     90    00000E                      ORG ADC12_VECTOR      ; /* 0xFFEE ADC */
     91    00000E ....                 DC16 default_int
     92    000010                      
     93    000010                      ORG USART0TX_VECTOR   ; /* 0xFFF0 USART 0 Transmit */
     94    000010 ....                 DC16 transmit_usart
     95    000012                      
     96    000012                      ORG USART0RX_VECTOR   ; /* 0xFFF2 USART 0 Receive */
     97    000012 ....                 DC16 receive_usart
     98    000014                      
     99    000014                      ORG WDT_VECTOR        ; /* 0xFFF4 Watchdog Timer */
    100    000014 ....                 DC16 default_int
    101    000016                      
    102    000016                      ORG COMPARATORA_VECTOR; /* 0xFFF6 Comparator A */
    103    000016 ....                 DC16 default_int
    104    000018                      
    105    000018                      ORG TIMERB1_VECTOR    ; /* 0xFFF8 Timer B CC1-6, TB */
    106    000018 ....                 DC16 default_int
    107    00001A                      
    108    00001A                      ORG TIMERB0_VECTOR    ; /* 0xFFFA Timer B CC0 */
    109    00001A ....                 DC16 default_int
    110    00001C                      
    111    00001C                      ORG NMI_VECTOR        ; /* 0xFFFC Non-maskable */
    112    00001C ....                 DC16 default_int
    113    00001E                      
    114    00001E                      ; ORG RESET_VECTOR /* 0xFFFE Reset [Highest Priority] */
    115    00001E              
    116    00001E              END
##############################
#          CRC:E017          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 148         #
##############################



