#include "msp430.h"             ; #define controlled include file

        NAME    main            ; module name

        PUBLIC  main            ; make the main label visible
                                ; outside this module
        ORG     0FFFEh
        DC16    init            ; set reset vector to 'init' label
        
        ; ustawienie wszystkich wektorow przerwan oprocz
        ; Reset na domyslna obsluge
        ORG     0FFFCh
        DC16    default_int
        ORG     0FFFAh
        DC16    default_int
        ORG     0FFF6h
        DC16    default_int
        ORG     0FFF4h
        DC16    default_int
        ORG     0FFF2h
        DC16    default_int
        ORG     0FFF0h
        DC16    default_int
        ORG     0FFEEh
        DC16    default_int
        ORG     0FFEAh
        DC16    default_int
        ORG     0FFE6h
        DC16    default_int
        ORG     0FFE4h
        DC16    default_int
        ORG     0FFE2h
        DC16    default_int
        ORG     0FFE0h
        DC16    default_int
        
        ORG     0FFE8h
        DC16    IO1_interrupt
        
        ORG     0FFECh
        DC16    timer_A_int
        
        ORG     0FFF8h
        DC16    timer_B_int
        
        RSEG    CSTACK        ; pre-declaration of segment
        RSEG    CODE          ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                   ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
          
        ; b0 - g0 - przycisk ladowania
        ; b1 - g1 - przycisk zliczania w dol
        BIS.B #003h, P1IES    ; ustaw edge select na H->L dla b0, b1
        BIS.B #003h, P1IE     ; wlacz przerwanie dla b0, b1
        
        BIS.B #080h, P1DIR    ; ustaw b7 jako bit wyjsciowy
                              ; (dioda bledu)
        BIS.B #080h, P1OUT    ; gasi diode bledu
        
        BIS.B #0FFh, P5DIR    ; anody wyswietlacza
        BIS.B #0FFh, P6DIR    ; ustaw P6 jako port wyjsciowy
        
        ; przygotuj licznik timer A
        ; licznik A ma liczyc w trybie UP od 0 do wartosci TACCR0
        ; przerwanie TACCR0 wykorzystywane jest przez obsluge
        ; eliminacji drgan
        BIS #0100h, TACTL     ; ustaw zegar timera na ACLK
        MOV #0005h, TACCR0    ; ustaw 5 jako wartosc do ktorej 
                              ; liczy timer
        BIS #0010h, TACCTL0   ; wlacz przerwania CCIFG0
        
        ; przygotuj licznik timer B w trybie continous
        MOV #163 ,TBCCR1      ; wartosc do liczenia przy odswiezaniu
                              ; 2ms -> 600 -> 258 
        MOV #32768 ,TBCCR2    ; wartosc do liczenia przy pomiarze czasu
                              ; 1 sekunda-> 30000 -> 7530h
        MOV #16384, TBCCR3    ; wartosc do liczenia przy miganiu kropka
                              ; zapalanie/gaszenie co 0.5s
 

        BR #init_registers    ; przeskocz procedury obslugi przerwan
        
        ; procedury obslugi przerwan
IO1_interrupt:
        BIT.B #001h, P1IFG    ; g0 ?
        JZ IO1_checkg1
        BIS #0001h, R15       ; ustaw znacznik g0
IO1_checkg1:
        BIT.B #002h, P1IFG    ; g1 ?
        JZ IO1_clear
        BIS #0002h, R15       ; ustaw znacznik g1
IO1_clear:
        BIC.B #0FFh, P1IFG    ; czysc znaczniki przerwan
        PUSH R6
        MOV 2(SP), R6
        BIC #CPUOFF, R6       ; zmodyfikuj lezace na stosie SR
        MOV R6, 2(SP)         ; aby obudzic procesor
        POP R6
        RETI
        
timer_A_int:
        BIS #0004h, R15       ; ustaw znacznik timer_A_TACCR0
        PUSH R6
        MOV 2(SP), R6
        BIC #CPUOFF, R6       ; zmodyfikuj lezace na stosie SR
        MOV R6, 2(SP)         ; aby obudzic procesor
        POP R6
        RETI

timer_B_int:

        ADD &TBIV,PC          ; Add offset to Jump table
        RETI                  ; Vector 0: No interrupt 
        JMP CCIFG_1_HND       ; Vector 2: Module 1 
        JMP CCIFG_2_HND       ; Vector 4: Module 2 
        JMP CCIFG_3_HND       ; Vector 6: Module 3
        RETI                  ; Vector 8: Module 4
        RETI                  ; Vector 10: Module 5
        RETI                  ; Vector 12: Module 6
        
TBIFG_HND:                    ; Vector 14: TIMOV Flag
                              ; Task starts here
        RETI 
CCIFG_1_HND:                  ; Vector 4: Module 2
                              ; odswiezanie 
        PUSH R4                            
        MOV R7,R4             ; obsluga anod
        
        CMP #0000H,R4
        JNE CHECK_6
        MOV #0001H,R4
        JMP WYSWIETL_ANODY
CHECK_6:
        CMP #0006H,R4
        JNE WYSWIETL_ANODY
        MOV #0008H,R4
        
WYSWIETL_ANODY:
        INV R4
        MOV.B R4,P5OUT
        
        MOV R9,R4             ; kopiuje minuty do R4 
        BIT #0008h, R15       ; sprawdza czy godziny czy minuty    
        JZ HOURS      
        JMP WYSWIETL
HOURS:  
        BIC #00FFH,R4         ; zeruj sekundy
        ADD R8,R4             ; dodaj godziny
        SWPB R4               ; zamien godziny z minutami

WYSWIETL:               
        ADD R7,PC             ; skok do obslugi odpowiedniej cyfry
        JMP CYFRA1
        JMP CYFRA2
        JMP CYFRA3
        JMP CYFRA4
        
CYFRA1: AND #000FH,R4         ; and-wybranie odpowiedniej cyfry
        JMP RETURN1
CYFRA2: AND #00F0H,R4       
        RRA R4                ; przesuniecie na wlasciwe miejsce
        RRA R4
        RRA R4
        RRA R4
        JMP RETURN1
CYFRA3: AND #0F00H,R4
        SWPB R4
        JMP RETURN1
CYFRA4: AND #0F000H,R4
        SWPB R4
        RRA R4                ; przesuniecie na wlasciwe miejsce
        RRA R4
        RRA R4
        RRA R4        
RETURN1:
        BIS #00F0H, R4        ; ustawienie bitow sterujacych
        CMP #0004H, R7
        JNE CD
        BIT #0008H,R15        ; hh:mm?
        JNZ CD
        BIT #0010h, R15       ; bit sterujacy wyswietlaniem kropki
        JNZ CD
        BIC #0080H,R4         ; wyswietlaj kropke w hh:mm co 0.5s
CD:
        MOV.B R4,P6OUT
        ADD #0002H, R7
        AND #0007H, R7 
        POP R4
        ADD #163,TBCCR1       ; ustawienie nowego punktu do liczenia
        JMP timer_B_int       ; sprawdza czy nie ma innego przerwania do 
                              ; obsluzenia
                              
CCIFG_2_HND:                  ; Vector 2: Module 1
        PUSH R7               ; liczenie czasu
        INC R9
        DADC R9
        MOV #0ffh,R7
        AND R9,R7
        CMP #0060h,R7         ;sprawdza czy juz minelo 60s
        JNE RETURN
        BIC #000ffh,R9
        ADD #0100h,R9
        DADC R9
Minuty:
        MOV #0FF00h,R7
        AND R9,R7
        CMP #6000h, R7        ; sprawdza czy juz minelo 60 minut
        JNE RETURN
        BIC #0ff00h,R9
        INC R8
        DADC R8
        CMP #024h,R8
        JNE RETURN
        MOV #00h,R8           ; przekrec licznik od poczatku
RETURN: ADD #32768,TBCCR2     ; ustawienie nowego punktu do liczenia
        POP R7
        JMP timer_B_int
        
CCIFG_3_HND:
        BIT #0010h, R15       ; toggle bit 4
        BIS #0010h, R15
        JZ ccifg3setok
        BIC #0010h, R15
ccifg3setok:
        ADD #16384, TBCCR3    ; przekrec licznik od poczatku
        JMP timer_B_int
        
default_int:
        BIC.B #080h, P1OUT    ; zapala diode bledu
        RETI
        
init_registers:
        CLR R5
        CLR R6
        CLR R7
        CLR R8                ; zerowanie godzin
        CLR R9                ; zerowanie sekund i minut
        CLR R10
        CLR R11
        CLR R12
        CLR R13
        CLR R15
        BIS #0010h, TBCCTL1   ; wlacz przerwania 
        BIS #0010h, TBCCTL2   ; wlacz przerwania 
        BIS #0010h, TBCCTL3   ; wlacz przerwania 
        BIS #0120h, TBCTL     ; ustaw zegar timera na ACLK
                              ; wystartuj liczenie             
                      
app:        
        ; R4  - rejestr obliczen tymczasowych
        ; R5  - stan ukladu w kontekscie obslugi g0
        ;       (na najmniej znaczacych 2och bitach)
        ; R6  - stan ukladu w kontekscie obslugi g1
        ;       (na najmniej znaczacych 2och bitach)
        ; R8  - zegar 8 bit na godzine 1-23
        ; R9  - zegar 8 bit na sekundy + 8bit na minuty
        ; R10 - g0::zliczanie cykli eliminacji drgan, max 32 (20h)
        ; R11 - g0::zliczanie wartosci poszukiwanej w eliminacji drgan
        ;       (ile razy pod rzad sie pojawila), max 4
        ; R12 - g1::zliczanie cykli eliminacji drgan, j.w.
        ; R13 - g1::zliczanie wartosci poszukiwanej w eliminacji drgan
        ;       j.w.
        ; R14 - rejestr obliczen tymczasowych 
        ;     
        ; R15 - znaczniki uzywane przez przerwania i aplikacje
        ;       b4: znacznik migania kropka wyswietlacza
        ;       b3: 1 => wyswietlanie mm:ss
        ;           0 => wyswietlanie hh:mm
        ;       b2: nastapilo przerwanie timera A
        ;       b1: wcisnieto g1
        ;       b0: wcisnieto g0
        
        
        ;----------- automat stanowy g0 -----------
        ; sprawdz w jakim stanie znajduje sie uklad
check000:
        CMP #0000h, R5      ; stan 000
        JNE check001
        BIT #0001h, R15     ; g0 ?
        JZ autom_g1
        BIC.B #001h, P1IE   ; wylacz przerwanie g0
        MOV #0001h, R5      ; stan := 001 
        BIS #0010h, TACTL   ; Timer A start UP to TACCR0
        BR #autom_g1        ; przejdz do obslugi g1
        
        ;--------------- obsluga g0 ---------------
check001:
        CMP #0001h, R5      ; stan 001
        JNE check011
do001:  BIT #0004h, R15     ; przerwanie timer_A
        JZ autom_g1
        INC R11             ; licznik_zer++
        INC R10             ; licznik_cykli++
        BIT.B #001h, P1IN   ; g0 != 0 ?
        JZ noclr001
        CLR R11                         
noclr001:
        CMP #0004h, R11                 
        JNE timeout001
        ; eliminacja drgan zakonczona
        BIT #0008h, R15
        BIS #0008h, R15     ; ustaw mm:ss
        JZ mmssset001
        BIC #0008h, R15     ; ustaw hh:mm
mmssset001:
        MOV #0003h, R5      ; stan := 011
        CLR R11             ; czysc liczniki eliminacji drgan
        CLR R10
        BR #autom_g1
timeout001:
        CMP #0020h, R10
        JNE autom_g1
        MOV #0000h, R5      ; stan := 000
        CLR R11             ; czysc liczniki eliminacji drgan
        CLR R10
        BIC #0001h, R15     ; czysc informacje o obsludze g0
        BIS.B #001h, P1IE   ; wlacz przerwanie g0
        BR #autom_g1
        
check011:
        CMP #0003h, R5      ; stan 011
        JNE check010
        BIT #0004h, R15     ; przerwanie timer_A
        JZ autom_g1
        BIT.B #001h, P1IN   ; g0 != 0 ?
        JZ autom_g1
        MOV #0002h, R5      ; stan := 010
        BR #autom_g1
        
check010: 
        ;CMP #0002h, R5     ; stan 010, nie musimy sprawdzac
        BIT #0004h, R15     ; przerwanie timer_A
        JZ autom_g1
        INC R11             ; licznik_zer++
        INC R10             ; licznik_cykli++
        BIT.B #001h, P1IN   ; g0 != 0 ?
        JNZ noclr010
        CLR R11        
noclr010:
        CMP #0004h, R11                 
        JNE timeout010
        ; eliminacja drgan zakonczona
        MOV #0000h, R5      ; stan := 000
        CLR R11             ; czysc liczniki eliminacji drgan
        CLR R10
        BIC #0001h, R15     ; czysc informacje o obsludze g0
        BIC.B #001h, P1IFG  ; czysc informacje o przerwaniach g0
        BIS.B #001h, P1IE   ; wlacz przerwania g0
        BR #autom_g1
timeout010:
        CMP #0020h, R10
        JNE autom_g1
        MOV #0003h, R5      ; stan := 011
        CLR R11             ; czysc liczniki eliminacji drgan
        CLR R10
        BR #autom_g1
        
autom_g1:
        ;----------- automat stanowy g1 -----------
        CMP #0000h, R6      ; stan 100 (dla porzadku 000h)
        JNE check101
        BIT #0002h, R15     ; g1 ?
        JZ sleep
        BIC.B #002h, P1IE   ; wylacz przerwanie g1
        MOV #0005h, R6      ; stan := 101
        BIS #0010h, TACTL   ; Timer A start UP to TACCR0
        BR #sleep
        
        ;--------------- obsluga g1 ---------------
check101:        
        CMP #0005h, R6      ; stan 101
        JNE check111
        BIT #0004h, R15     ; przerwanie timer_A
        JZ sleep
        INC R13             ; licznik_zer++
        INC R12             ; licznik_cykli++
        BIT.B #002h, P1IN   ; g1 != 0 ?
        JZ noclr101
        CLR R13        
noclr101:
        CMP #0004h, R13                 
        JNE timeout101
        
        CLR R4
        MOV.B P4IN, R4      ; laduj mm do R4
        DADC R4
        CMP #0060h, R4
        JL nommchange101
        MOV #0059h, R4
nommchange101:
        SWPB R4             ; [00mm] -> [mm00]
        
        CLR R14
        MOV.B P3IN, R14     ; laduj hh do R14
        DADC R14
        CMP #0024h, R14
        JL nohhchange101
        MOV #0023h, R14        ; R14 = [00hh]
nohhchange101:

        BIC #0011h, TBCCTL2 ; wylacz przerwania zliczania zegara
        BIC #0030h, TBCTL   ; zastopuj timerB
        MOV R14, R8         ; ustaw hh
        MOV R4, R9          ; ustaw mmss
        MOV TBR, R4
        ADD #32768, R4
        MOV R4, TBCCR2      ; zapewnij, ze odliczy sie pelna sek
        BIS #0020h, TBCTL   ; wlacz timerB
        BIS #0010h, TBCCTL2 ; wlacz przerwania zliczania zegara

        MOV #0007h, R6      ; stan := 111
        CLR R13             ; czysc liczniki eliminacji drgan
        CLR R12
        BR #sleep
timeout101:
        CMP #0020h, R12
        JNE sleep
        MOV #0000h, R6      ; stan := 100
        CLR R13             ; czysc liczniki eliminacji drgan
        CLR R12
        BIC #0002h, R15     ; czysc informacje o obsludze g1
        BIC.B #002h, P1IFG  ; czysc informacje o przerwaniu g1
        BIS.B #002h, P1IE   ; wlacz przerwania g1
        BR #sleep

check111:
        CMP #0007h, R6      ; stan 111
        JNE check110
        BIT #0004h, R15     ; przerwanie timer_A
        JZ sleep
        BIT.B #002h, P1IN   ; g1 != 0 ?
        JZ sleep
        MOV #0006h, R6      ; stan := 110
        BR #sleep

check110: 
        ;CMP #0006h, R6     ; stan 110, nie musimy sprawdzac
        BIT #0004h, R15     ; przerwanie timer_A
        JZ sleep
        INC R13             ; licznik_zer++
        INC R12             ; licznik_cykli++
        BIT.B #002h, P1IN   ; g1 != 0 ?
        JNZ noclr110
        CLR R13        
noclr110:
        CMP #0004h, R13                 
        JNE timeout110
        ; eliminacja drgan zakonczona
        MOV #0000h, R6      ; stan := 000
        CLR R13             ; czysc liczniki eliminacji drgan
        CLR R12
        BIC #0002h, R15     ; czysc informacje o obsludze g1
        BIC.B #002h, P1IFG  ; czysc informacje o przerwaniu g1
        BIS.B #002h, P1IE   ; wlacz przerwanie g1
        BR #sleep
timeout110:
        CMP #0020h, R12
        JNE sleep
        MOV #0007h, R6      ; stan := 111
        CLR R13             ; czysc liczniki eliminacji drgan
        CLR R12
        BR #sleep
       
sleep:
        BIC #0004h, R15     ; wyczyszczenie info o przerwaniu
                            ;  timerA jesli bylo
        BIT #0003h, R15     ; czy trwa obsluga g0 lub g1?
        JNZ enter_lpm       ; jesli tak, to spij
        BIC #0010h, TACTL   ; Timer A stop UP to TACCR0
 
enter_lpm:        
        BIS #GIE+CPUOFF, SR ; przejscie do LPM1
        BR #app             ; skok na poczatek czesci aplikacyjnej

        END
              