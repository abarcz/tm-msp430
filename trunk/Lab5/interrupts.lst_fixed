###############################################################################
#                                                                             #
#     IAR Assembler V5.10.4.50168/W32  for MSP430 13/Jan/2011  19:31:57       #
#     Copyright 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#           Target option =  MSP430                                           #
#           Source file   =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\interrupts.asm#
#           List file     =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\List\interrupts.lst#
#           Object file   =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\Obj\interrupts.r43#
#           Command line  =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\interrupts.asm #
#                            -OE:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\Obj\ #
#                            -s+ -M<> -w+                                     #
#                            -LE:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\List\ #
#                            -t8 -r -D__MSP430F149__                          #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0 Kickstart\430\INC\ #
#                                                                             #
###############################################################################

      1    000000              NAME INTERRUPTS
      2    000000              
      3    000000              #include "msp430.h"           ; Processor specific definitions
      4    000000              #include "shared.h"           ; wspolne definicje przerwan i aplikacji
      5    000000              
      6    000000              PUBLIC interrupts             ; Declare symbol to be exported
      7    000000              
      8    000000              EXTERN g_t_curr_char          ; wskaznik nastepnego znaku do wyslania przez tr
      9    000000              EXTERN g_t_chars_count        ; int ilosc znakow pozostala do wyslania przez tr
     10    000000              EXTERN g_r_curr_char          ; wskaznik miejsca na nastepny odebrany znak
     11    000000              EXTERN g_r_chars_count        ; ilosc znakow odebrana przez receive
     12    000000              EXTERN g_flags                ; znaczniki do komunikacji z aplikacja
     13    000000              EXTERN g_rec_addr_step        ; krok o jaki zmieniamy adres przy odbiorze
     14    000000              
     15    000000              RSEG CODE                     ; Code is relocatable
     16    000000              
     17    000000              /* znaczniki przekazywane miedzy ISR a petla glowna
     18    000000              b4 = przerwanie transmit zglosilo gotowosc do wyslania nowego tekstu
     19    000000              b5 = przerwanie receive zglosilo koniec linii(odebrany wiersz)
     20    000000              b6 = przerwanie receive zlosilo przepelnienie bufora odbiorczego
     21    000000              */
     22    000000              interrupts
     23    000000              
     24    000000              default_int:
     25    000000 F0C08000....         BIC.B #080h, P1OUT            ; zapala diode bledu
     26    000006 0013                 RETI
     27    000008                      
     28    000008              transmit_usart:
     29    000008 0612                 PUSH R6
     30    00000A 8093....             CMP #0000h,g_t_chars_count    ; czy wszystko wyslano
     31    00000E 0A24                 JEQ end_transmision     
     32    000010 1640....             MOV g_t_curr_char,R6          ; wpisz adres znaku do R6
     33    000014 E046....             MOV.B @R6, U0TXBUF            ; wyslij znak spod adresu z R6
     34    000018 9083....             DEC g_t_chars_count           ; zmniejsz ilosc znakow do wyslania
     35    00001C 9053....             ADD #0001h,g_t_curr_char      ; skok do nastepnego znaku
     36    000020 3641                 POP R6
     37    000022 0013                 RETI
     38    000024              end_transmision:
     39    000024 B0D01000....         BIS #0010h, g_flags           ; powiadom o zakonczeniu wysylania 
     40    00002A 16410200             MOV 2(SP), R6
     41    00002E 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     42    000032 81460200             MOV R6, 2(SP)                 ; aby obudzic procesor
     43    000036 3641                 POP R6
     44    000038 0013                 RETI
     45    00003A                          
     46    00003A              receive_usart:
     47    00003A 0612                 PUSH R6 
     48    00003C 5640....             MOV.B U0RXBUF,R6              ; przepisz odebrany znak jak najszybciej
     49    000040 36900D00             CMP #LINE_END, R6             ; koniec linii? (nie zapisywany)
     50    000044 0E20                 JNE not_endl
     51    000046 F0C04000....         BIC.B #0040h, IE1             ; blokuje przerwania receive
     52    00004C B0D02000....         BIS #0020h, g_flags           ; znacznik 'koniec linii'
     53    000052 16410200             MOV 2(SP), R6
     54    000056 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     55    00005A 81460200             MOV R6, 2(SP)                 ; aby obudzic procesor
     56    00005E 3641                 POP R6
     57    000060 0013                 RETI
     58    000062              not_endl: 
     59    000062 B0901400....         CMP #BUF_SIZE, g_r_chars_count; przepelnienie?
     60    000068 0E20                 JNE not_full
     61    00006A F0C04000....         BIC.B #0040h, IE1             ; blokuje przerwania receive
     62    000070 B0D04000....         BIS #0040h, g_flags           ; znacznik 'przepelnienie'
     63    000076 16410200             MOV 2(SP), R6
     64    00007A 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     65    00007E 81460200             MOV R6, 2(SP)                 ; aby obudzic procesor              
                                                      
     66    000082 3641                 POP R6
     67    000084 0013                 RETI      
     68    000086              not_full:                             ; wpisz znak do tablicy                    
     69    000086 0712                 PUSH R7
     70    000088 1740....             MOV g_r_curr_char, R7
     71    00008C C7460000             MOV.B R6, 0(R7)
     72    000090 9053....             INC g_r_chars_count           ; zwieksz ilosc odebranych znakow
     73    000094 9050........         ADD g_rec_addr_step, g_r_curr_char  ; zmien adres o wartosc kroku
     74    00009A 3741                 POP R7
     75    00009C 3641                 POP R6
     76    00009E 0013                 RETI
     77    0000A0              
     78    000000              COMMON INTVEC(1)              ; Interrupt vectors
     79    000000                      
     80    000002                      ORG PORT2_VECTOR      ; /* 0xFFE2 Port 2 */
     81    000002 ....                 DC16 default_int
     82    000004                      
     83    000004                      ORG USART1TX_VECTOR   ; /* 0xFFE4 USART 1 Transmit */
     84    000004 ....                 DC16 default_int
     85    000006                      
     86    000006                      ORG USART1RX_VECTOR   ; /* 0xFFE6 USART 1 Receive */
     87    000006 ....                 DC16 default_int
     88    000008                      
     89    000008                      ORG PORT1_VECTOR      ; /* 0xFFE8 Port 1 */
     90    000008 ....                 DC16 default_int
     91    00000A                      
     92    00000A                      ORG TIMERA1_VECTOR    ; /* 0xFFEA Timer A CC1-2, TA */
     93    00000A ....                 DC16 default_int
     94    00000C                      
     95    00000C                      ORG TIMERA0_VECTOR    ; /* 0xFFEC Timer A CC0 */
     96    00000C ....                 DC16 default_int
     97    00000E                      
     98    00000E                      ORG ADC12_VECTOR      ; /* 0xFFEE ADC */
     99    00000E ....                 DC16 default_int
    100    000010                      
    101    000010                      ORG USART0TX_VECTOR   ; /* 0xFFF0 USART 0 Transmit */
    102    000010 ....                 DC16 transmit_usart
    103    000012                      
    104    000012                      ORG USART0RX_VECTOR   ; /* 0xFFF2 USART 0 Receive */
    105    000012 ....                 DC16 receive_usart
    106    000014                      
    107    000014                      ORG WDT_VECTOR        ; /* 0xFFF4 Watchdog Timer */
    108    000014 ....                 DC16 default_int
    109    000016                      
    110    000016                      ORG COMPARATORA_VECTOR; /* 0xFFF6 Comparator A */
    111    000016 ....                 DC16 default_int
    112    000018                      
    113    000018                      ORG TIMERB1_VECTOR    ; /* 0xFFF8 Timer B CC1-6, TB */
    114    000018 ....                 DC16 default_int
    115    00001A                      
    116    00001A                      ORG TIMERB0_VECTOR    ; /* 0xFFFA Timer B CC0 */
    117    00001A ....                 DC16 default_int
    118    00001C                      
    119    00001C                      ORG NMI_VECTOR        ; /* 0xFFFC Non-maskable */
    120    00001C ....                 DC16 default_int
    121    00001E                      
    122    00001E                      ; ORG RESET_VECTOR /* 0xFFFE Reset [Highest Priority] */
    123    00001E              
    124    00001E              END
##############################
#          CRC:56EC          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 188         #
##############################



