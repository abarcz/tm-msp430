###############################################################################
#                                                                             #
#     IAR Assembler V5.10.4.50168/W32  for MSP430 11/Jan/2011  14:41:25       #
#     Copyright 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#           Target option =  MSP430                                           #
#           Source file   =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\interrupts.asm#
#           List file     =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\List\interrupts.lst#
#           Object file   =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\Obj\interrupts.r43#
#           Command line  =  E:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\interrupts.asm #
#                            -OE:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\Obj\ #
#                            -s+ -M<> -w+                                     #
#                            -LE:\various\_PW\TM\Lab_SVN\Lab5\IAR MSP430 files\Debug\List\ #
#                            -t8 -r -D__MSP430F149__                          #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0 Kickstart\430\INC\ #
#                                                                             #
###############################################################################

      1    000000              NAME INTERRUPTS
      2    000000              #include "msp430.h"           ; Processor specific definitions
      3    000000              
      4    000000              PUBLIC interrupts             ; Declare symbol to be exported
      5    000000              
      6    000000              EXTERN g_t_curr_char          ; wskaznik nastepnego znaku do wyslania przez trans
      7    000000              EXTERN g_t_chars_to_send      ; int ilosc znakow pozostala do wyslania przez trans
      8    000000              EXTERN g_r_curr_char          ; wskaznik miejsca na nastepny odebrany znak
      9    000000              EXTERN g_r_chars_received     ; ilosc znakow odebrana przez receive
     10    000000              EXTERN g_flags                ; znaczniki do komunikacji z aplikacja
     11    000000              EXTERN g_receive_timeout      ; czas o jaki trzeba przesunac timer A
     12    000000              
     13    000000              
     14    000000              
     15    000000              RSEG CODE                     ; Code is relocatable
     16    000000              
     17    000000              /* znaczniki przekazywane miedzy ISR a petla
                                glowna
     18    000000              b0 = przerwanie receive zg³osi³o rozpoczêcie
                                odbioru ci¹gu znaków
     19    000000              b4 = przerwanie transmit zglosilo gotowosc do
                                wyslania nowego tekstu
     20    000000              b5 = przerwanie timerA zglosilo timeout
                                
     21    000000              */
     22    000000              interrupts
     23    000000              
     24    000000              default_int:
     25    000000 F0C08000....         BIC.B #080h, P1OUT            ; zapala diode bledu
     26    000006 0013                 RETI
     27    000008                      
     28    000008              transmit_usart:
     29    000008 0612                 PUSH R6
     30    00000A 8093....             CMP #0000h,g_t_chars_to_send  ; czy wszystko wyslano
     31    00000E 0A24                 JEQ end_transmision
     32    000010 1640....             MOV g_t_curr_char,R6
     33    000014 E046....             MOV.B @R6, U0TXBUF
     34    000018 9083....             DEC g_t_chars_to_send
     35    00001C 9053....             ADD #0001h,g_t_curr_char      ; skok do nastepnego znaku
     36    000020 3641                 POP R6
     37    000022 0013                 RETI
     38    000024              end_transmision:
     39    000024 B0D01000....         BIS #0010h, g_flags           ; powiadom ze chcemy kolejny tekst do wyslania
     40    00002A 16410200             MOV 2(SP), R6
     41    00002E 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     42    000032 81460200             MOV R6, 2(SP)                 ; aby obudzic procesor
     43    000036 3641                 POP R6
     44    000038 0013                 RETI
     45    00003A                          
     46    00003A              receive_usart:
     47    00003A 0612                 PUSH R6 
     48    00003C 0712                 PUSH R7
     49    00003E 5640....             MOV.B U0RXBUF,R6 
     50    000042 B0902000....         CMP #32, g_r_chars_received
     51    000048 0320                 JNE not_full_yet
     52    00004A 3741                 POP R7                        ; jesli przekroczono ilosc znakow, nic nie rob
     53    00004C 3641                 POP R6
     54    00004E 0013                 RETI      
     55    000050              not_full_yet:
     56    000050 9050........         ADD g_receive_timeout, TACCR0 ; przesun timeout
     57    000056 90C3....             BIC #0001h, TACCTL0
     58    00005A 1740....             MOV g_r_curr_char, R7
     59    00005E C7460000             MOV.B R6, 0(R7)
     60    000062 9053....             INC g_r_chars_received
     61    000066 9083....             SUB #0001h,g_r_curr_char
     62    00006A 9093....             CMP #0001h,g_r_chars_received
     63    00006E 0820                 JNE receive_next
     64    000070 90D3....             BIS #0001h, g_flags           ; powiadom app o rozpoczeciu pobierania
     65    000074 16410400             MOV 4(SP), R6
     66    000078 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     67    00007C 81460400             MOV R6, 4(SP)                 ; aby obudzic procesor
     68    000080              receive_next:
     69    000080 3741                 POP R7
     70    000082 3641                 POP R6
     71    000084 0013                 RETI
     72    000086                      
     73    000086              timer_A_int:
     74    000086 B0D02000....         BIS #0020h, g_flags
     75    00008C 0612                 PUSH R6
     76    00008E 16410200             MOV 2(SP), R6
     77    000092 36C01000             BIC #CPUOFF, R6               ; zmodyfikuj lezace na stosie SR
     78    000096 81460200             MOV R6, 2(SP)                 ; aby obudzic procesor
     79    00009A 3641                 POP R6
     80    00009C 0013                 RETI
     81    00009E              
     82    000000              COMMON INTVEC(1)              ; Interrupt vectors
     83    000000                      
     84    000002                      ORG PORT2_VECTOR      ; /* 0xFFE2 Port 2 */
     85    000002 ....                 DC16 default_int
     86    000004                      
     87    000004                      ORG USART1TX_VECTOR   ; /* 0xFFE4 USART 1 Transmit */
     88    000004 ....                 DC16 default_int
     89    000006                      
     90    000006                      ORG USART1RX_VECTOR   ; /* 0xFFE6 USART 1 Receive */
     91    000006 ....                 DC16 default_int
     92    000008                      
     93    000008                      ORG PORT1_VECTOR      ; /* 0xFFE8 Port 1 */
     94    000008 ....                 DC16 default_int
     95    00000A                      
     96    00000A                      ORG TIMERA1_VECTOR    ; /* 0xFFEA Timer A CC1-2, TA */
     97    00000A ....                 DC16 default_int
     98    00000C                      
     99    00000C                      ORG TIMERA0_VECTOR    ; /* 0xFFEC Timer A CC0 */
    100    00000C ....                 DC16 timer_A_int
    101    00000E                      
    102    00000E                      ORG ADC12_VECTOR      ; /* 0xFFEE ADC */
    103    00000E ....                 DC16 default_int
    104    000010                      
    105    000010                      ORG USART0TX_VECTOR   ; /* 0xFFF0 USART 0 Transmit */
    106    000010 ....                 DC16 transmit_usart
    107    000012                      
    108    000012                      ORG USART0RX_VECTOR   ; /* 0xFFF2 USART 0 Receive */
    109    000012 ....                 DC16 receive_usart
    110    000014                      
    111    000014                      ORG WDT_VECTOR        ; /* 0xFFF4 Watchdog Timer */
    112    000014 ....                 DC16 default_int
    113    000016                      
    114    000016                      ORG COMPARATORA_VECTOR; /* 0xFFF6 Comparator A */
    115    000016 ....                 DC16 default_int
    116    000018                      
    117    000018                      ORG TIMERB1_VECTOR    ; /* 0xFFF8 Timer B CC1-6, TB */
    118    000018 ....                 DC16 default_int
    119    00001A                      
    120    00001A                      ORG TIMERB0_VECTOR    ; /* 0xFFFA Timer B CC0 */
    121    00001A ....                 DC16 default_int
    122    00001C                      
    123    00001C                      ORG NMI_VECTOR        ; /* 0xFFFC Non-maskable */
    124    00001C ....                 DC16 default_int
    125    00001E                      
    126    00001E                      ; ORG RESET_VECTOR /* 0xFFFE Reset [Highest Priority] */
    127    00001E              
    128    00001E              END
##############################
#          CRC:E556          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 186         #
##############################



